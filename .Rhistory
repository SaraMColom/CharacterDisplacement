########################################################
# Perform linear regression of PCs onto relative fitness
########################################################
# Selection Analysis
# Subset by treatment
PCAalone<-droplevels(pcFamilyMeans%>%filter(Trt=="Alone"))
PCAcomp<-droplevels(pcFamilyMeans%>%filter(Trt!="Alone"))
PC1.res.alone<-summary(lm(SeedNumberResid~PCA1,PCAalone))
PC1.res.alone
PC2.res.alone<-summary(lm(SeedNumberResid~PCA2,PCAalone))
PC2.res.alone
PC3.res.alone<-summary(lm(SeedNumberResid~PCA3,PCAalone))
PC3.res.alone # Root size--No evidence of selection. Not reported.
PC4.res.alone<-summary(lm(SeedNumberResid~PCA4,PCAalone))
PC4.res.alone
PC1.res.comp<-summary(lm(SeedNumberResid~PCA1,PCAcomp))
PC1.res.comp
PC2.res.comp<-summary(lm(SeedNumberResid~PCA2,PCAcomp))
PC2.res.comp
PC3.res.comp<-summary(lm(SeedNumberResid~PCA3,PCAcomp))
PC3.res.comp # Root size--No evidence of selection. Not reported.
PC4.res.comp<-summary(lm(SeedNumberResid~PCA4,PCAcomp)) # w/o Remove outlier
PC4.res.comp # Reported
## ANCOVA for PCA4 (Root morphology)
anova(lm(SeedNumberResid~PCA4*Trt,pcFamilyMeans))
# Output
#          Df Sum Sq  Mean Sq F value Pr(>F)
#PCA4       1 0.0069 0.006904  0.0699 0.7923
## Quadtratic seleciton on PCs between combinations
PCAcomp$PCA3_2<-PCAcomp$PCA3*PCAcomp$PCA3
PCAcomp$PCA1_2<-PCAcomp$PCA1*PCAcomp$PCA1
PCAcomp$PCA4_2<-PCAcomp$PCA4*PCAcomp$PCA4
PCAcomp$PCA2_2<-PCAcomp$PCA2*PCAcomp$PCA2
summary(lm(SeedNumberResid~PCA1_2+PCA1,PCAcomp))
summary(lm(SeedNumberResid~PCA2_2+PCA2,PCAcomp))
summary(lm(SeedNumberResid~PCA3_2+PCA3,PCAcomp))
summary(lm(SeedNumberResid~PCA4_2+PCA4,PCAcomp))
summary(lm(SeedNumberResid~PCA1_2+PCA1,PCAalone))
summary(lm(SeedNumberResid~PCA2_2+PCA2,PCAalone))
summary(lm(SeedNumberResid~PCA3_2+PCA3,PCAalone))
summary(lm(SeedNumberResid~PCA4_2+PCA4,PCAalone))
# No evidence of quadratic selection
########################################################
# Plot selection on PC4 (root morphology)
########################################################
TraitsAllFit<-merge(TraitsAll,RelFitMean)
TraitsAllFit<-merge(TraitsAll,RelFitMean2)
IpPA4b<-merge(IpPA4,RelFitMean2)
pcFamilyMeans<-merge(pcFamilyMeans,pcFamilySE)
FitStandError2<-aggregate(list(Fitmean[c( "SeedNumberResid")]),by=list(Fitmean$Trt,Fitmean$ML),FUN=std.error) #Estimate Standard Error
colnames(FitStandError2)<-c("Trt","ML","Fit_SE")
pcFamilyMeans<-merge(FitStandError2,pcFamilyMeans)
#### Fig. 4 A and B
RegressAlone<-ggplot(pcFamilyMeans%>%filter(Trt=="Alone"))+
geom_point(aes(PCA4, SeedNumberResid),size=5,alpha=0.5)+
#geom_errorbar(aes(x=PCA4,ymin=SeedNumberResid-Fit_SE,ymax=SeedNumberResid+Fit_SE))+ # Uncomment to add error bars
#geom_errorbarh(aes(y=SeedNumberResid,xmin=PCA4-PCA4_SE,xmax=PCA4+PCA4_SE))+ # Uncomment to add error bars
scale_color_manual(values=c("red","black"))+
stat_smooth(aes(PCA4, SeedNumberResid),alpha=0.5,method="lm", formula=y~x,se=F,fullrange = T,color="black")+
#scale_linetype_manual(values=c("twodash", "solid"))+
theme_classic()+
ylab("Relative fitness")+
xlab("Root morphology (PC4)")+
theme(axis.text.x = element_text(
size=20),
axis.text.y = element_text(
size=20),axis.title.y = element_text(size=20),
axis.title.x = element_text(
size=20))+
theme(axis.text.x = element_text(vjust = 1, hjust=1))+
theme(axis.text.x = element_text(vjust = 1, hjust=1))+
labs(color = "Treatment")+
theme(legend.text=element_text(size=12),legend.title=element_text(size=12),legend.position = 'top',
legend.direction = "horizontal")
RegressAlone
RegressComp<-ggplot(data=pcFamilyMeans%>%filter(Trt!="Alone"))+
geom_point(aes(PCA4, SeedNumberResid),size=5,alpha=0.5)+
#geom_errorbar(aes(x=PCA4,ymin=SeedNumberResid-Fit_SE,ymax=SeedNumberResid+Fit_SE))+ # Uncomment to add error bars
#geom_errorbarh(aes(y=SeedNumberResid,xmin=PCA4-PCA4_SE,xmax=PCA4+PCA4_SE))+ # Uncomment to add error bars
stat_smooth(data=pcFamilyMeans%>%filter(Trt!="Alone"),aes(PCA4, SeedNumberResid),alpha=0.5,method="lm", formula=y~x,se=F,fullrange = T,color="black")+
#scale_linetype_manual(values=c("twodash", "solid"))+
theme_classic()+
ylab("Relative fitness")+
xlab("Root morphology (PC4)")+
theme(axis.text.x = element_text(
size=20),
axis.text.y = element_text(
size=20),axis.title.y = element_text(size=20),
axis.title.x = element_text(
size=20))+
theme(axis.text.x = element_text(vjust = 1, hjust=1))+
theme(axis.text.x = element_text(vjust = 1, hjust=1))+
labs(color = "Treatment")+
theme(legend.text=element_text(size=12),legend.title=element_text(size=12),legend.position = 'top',
legend.direction = "horizontal")
RegressComp
#####################################################
# Post-Hoc Linear mixed model on single traits
#####################################################
# Run for loop to save results of LMM on the traits that were significant from PC back regression
Vars<-c("trans.SKL_NODES", "trans.AVG_DENSITY", "trans.TD_AVG", "trans.RTP_COUNT",
"trans.STA_RANGE", "trans.STA_MAX", "trans.RTA_RANGE", "trans.ADVT_COUNT",
"trans.HYP_DIA", "trans.TAP_DIA", "trans.MAX_DIA_90","Species","ML","Trt","Block","Combos")
SubsetDirt=DirtP[c(Vars)]
dim(SubsetDirt)
df=SubsetDirt
df$Block<-as.factor(df$Block)
Response=as.list(names(SubsetDirt[1:11]))
for(i in 1:11){
if(i==1){
Trait=paste(Response[i])
ModelFixed=data.frame(anova(lmer(paste(Response[i],"~ Block+Trt+(1|ML)"), data=df)))
ModelRand=data.frame(ranova(lmer(paste(Response[i],"~ Block+Trt+(1|ML)"), data=df)))
ModelRand$Effect=row.names(ModelRand)
ModelFixed$Effect=row.names(ModelFixed)
ModelRand$Trait=paste(Trait)
ModelFixed$Trait=paste(Trait)
print("Fixed effects estimated")
}
else{
Trait=paste(Response[i])
ModelFixed1=data.frame(anova(lmer(paste(Response[i],"~ Block+Trt+(1|ML)"), data=df)))
ModelRand1=data.frame(ranova(lmer(paste(Response[i],"~ Block+Trt+(1|ML)"), data=df)))
ModelRand1$Effect=row.names(ModelRand1)
ModelFixed1$Effect=row.names(ModelFixed1)
ModelRand1$Trait=paste(Trait)
ModelFixed1$Trait=paste(Trait)
ModelRand=rbind(ModelRand,ModelRand1)
ModelFixed=rbind(ModelFixed,ModelFixed1)
print("Random effects estimated")
}
}
# Remove the estimates for intercept in the random effects results
ModelRand<-ModelRand[grep("ML",ModelRand$Effect),]
ModelRand$Effect<-"Mat. Line"
# Examine results
DT::datatable(ModelFixed)
DT::datatable(ModelRand)
# Round to the first three digits
#ModelFixed[1:6]=round(ModelFixed[1:6],3)
#ModelRand[1:6]=round(ModelRand[1:6],3)
# Does competitor impact basal root number?
df$Comp=sub(".*\\-","",df$Combos)
#####################################################
# Post Hoc character displacement test
#####################################################
# Index traits of interest
Ipurp<-droplevels(subset(TraitsAll,Species=="Ip"))
Ipurp<-droplevels(subset(Ipurp,Trt=="Inter"))[c(Vars,"Combos","Position")]
Ihed<-droplevels(subset(TraitsAll,Species!="Ip"))[c(Vars,"Combos","Position" )]
# Merge by Position
colnames(Ihed)[1:15]<-paste(colnames(Ihed)[1:15],"_Competitor",sep="") # Modify competitor's column names
Both2<-merge(Ipurp,Ihed)
# Calculate euclidean distances
# Define a distance function
f<-function(x)
{
return(mean(dist(x)))
}
# Estimates ALL pairwise* Distances
Both2$PhenDist_SKL=apply(Both2[,grep("SKL_NODES",names(Both2))],1,f) # SKL NODES
Both2$PhenDist_Dstm=apply(Both2[,grep("DIA_STM",names(Both2))],1,f) # DIA STM
Both2$PhenDist_AvDen=apply(Both2[,grep("AVG_DENSITY",names(Both2))],1,f)
Both2$PhenDist_TDav=apply(Both2[,grep("TD_AVG",names(Both2))],1,f)
Both2$PhenDist_RTPcount=apply(Both2[,grep("RTP_COUNT",names(Both2))],1,f)
Both2$PhenDist_STA=apply(Both2[,grep("STA_RANGE",names(Both2))],1,f)
Both2$PhenDist_RTA=apply(Both2[,grep("RTA_RANGE",names(Both2))],1,f)
Both2$PhenDist_ADVTcount=apply(Both2[,grep("ADVT_COUNT",names(Both2))],1,f)
Both2$PhenDist_STAmax=apply(Both2[,grep("STA_MAX",names(Both2))],1,f)
Both2$PhenDist_TAPdia=apply(Both2[,grep("TAP_DIA",names(Both2))],1,f)
Both2$PhenDist_Hypdia=apply(Both2[,grep("HYP_DIA",names(Both2))],1,f)
Both2$PhenDist_90dia=apply(Both2[,grep("MAX_DIA_90",names(Both2))],1,f)
#Both2SE <-aggregate(list(Both2[c( "PhenDist_BASALcount")]),by=list(Both2$Combos),FUN=std.error) #Estimate Standard Error
#colnames(Both2SE)[1]<-c("Combos")
#colnames(Both2SE)[grep("Phen",names(Both2SE))]<-paste(colnames(Both2SE)[grep("Phen",names(Both2SE))],"SE",sep="_")
DistanceMeans<-aggregate(list(Both2[grep("PhenDist",names(Both2))]),by=list(Both2$Trt,Both2$ML,Both2$Combos),FUN=mean) # Mean phenotypic distance
colnames(DistanceMeans)[1:3]=c("Trt","ML","Combos") # Rename coloumns
# Merge to fitness averaged at level of combo
PhenDistFit=merge(RelFitMean,DistanceMeans)
PhenDistFit<-droplevels(PhenDistFit%>%filter(Trt=="Inter"))
#Both2a<-merge(PhenDistFit,Both2SE,by="Combos")
#Both2a<-unique(droplevels(Both2a))
# Lets color in the outliers
#Both2a$Outlier<-ifelse(Both2a$PhenDist_BASALcount>2.4,"Yes","No")
#Out2=Both2a[which(Both2a$Outlier=="Yes"),"Combos"]
#Fitmean$Outlier2<-ifelse(Fitmean$Combos%in%Out2[1],"Yes","No")
# Perform linear regression
summary(lm(SeedResiduals~PhenDist_SKL,PhenDistFit))
#summary(lm(SeedResiduals~PhenDist_Dstm,PhenDistFit))
summary(lm(SeedResiduals~PhenDist_AvDen,PhenDistFit))
summary(lm(SeedResiduals~PhenDist_TDav,PhenDistFit))
summary(lm(SeedResiduals~PhenDist_RTPcount,PhenDistFit))
summary(lm(SeedResiduals~PhenDist_STA,PhenDistFit))
summary(lm(SeedResiduals~PhenDist_RTA,PhenDistFit))
summary(lm(SeedResiduals~PhenDist_ADVTcount,PhenDistFit))
summary(lm(SeedResiduals~PhenDist_STAmax,PhenDistFit))#
summary(lm(SeedResiduals~PhenDist_Hypdia,PhenDistFit))#
summary(lm(SeedResiduals~PhenDist_90dia,PhenDistFit))#
summary(lm(SeedResiduals~PhenDist_TAPdia,PhenDistFit))
##################################################################################
# Post=Hoc Analysis for Combination effect on root architecture
##################################################################################
# PC 2--at the level of a combination BLOCK removed
TraitsAll$Comp<-sub(".*\\-","",TraitsAll$Combos)
PC2model2<-lm(PCA2~Trt+Comp+Combos,TraitsAll) # Marginal competitor effect, significant Ml by Ml effect
anova(PC2model2)
PC1model2<-lm(PCA1~Trt+Comp+Combos,TraitsAll) # Marginal competitor effect, significant Ml by Ml effect
anova(PC1model2) # Marginal combination effect
PC3model2<-lm(PCA3~Trt+Comp+Combos,TraitsAll) # Marginal competitor effect, significant Ml by Ml effect
anova(PC3model2) # Marginal combination effect
PC4model2<-lm(PCA4~Trt+Comp+Combos,TraitsAll) # Marginal competitor effect, significant Ml by Ml effect
anova(PC4model2) # Significant treatment effect and combination effect
#########################################
# Fig. S5 Additional (I.hed plot)
#########################################
sizeIhed<-size%>%
filter(Species=="Ihed")%>%
group_by(ML,Combos)%>%
summarise("MeanSize"=mean(Leaf.Number),"SE_Size"=std.error(Leaf.Number))
PhenDistIhed<-Both%>%
#filter(Species=="Ihed")%>%
group_by(Combos)%>%
summarise("MeanPhenDistPC2"=mean(PhenDist_PCA2),"SE_PhenDist"=std.error(PhenDist_PCA2))
HedData<-merge(sizeIhed,PhenDistIhed)
summary(lm(MeanSize~log(MeanPhenDistPC2),HedData%>%filter(MeanSize<20))) # marginally significant when we filter our the
# size greater than 20; significant LOG relationship
hedModel<-lm(PCA2~Combos,droplevels(TraitsAll%>%filter(Species=="Ihed")))
anova(hedModel) # Not significant
ggplot(data=HedData%>%filter(MeanSize<20),aes(MeanPhenDistPC2,MeanSize))+
geom_point()+
geom_errorbar(aes(ymin=MeanSize-SE_Size,ymax=MeanSize+SE_Size))+
geom_errorbarh(aes(xmin=MeanPhenDistPC2-SE_PhenDist,xmax=MeanPhenDistPC2+SE_PhenDist))+
theme_classic()+
scale_fill_manual(values = c("grey","blue","gold"))+
theme(axis.text.x=element_text(angle=90,size=12,vjust=0.5,color="black"),axis.text.y=element_text(size=12,color="black"),legend.position = "none",axis.title = element_text(size=20))+
ylab("Plant Size\n")+
xlab("\nPhenotypic Distance Root Architecture (PC2)")
#########################################
# Plot phenotypic distance measure of root architecture vs raw value of trait
#########################################
plot(Both$PCA2,Both$PhenDist_PCA2)
abline(Both$PCA2,Both$PhenDist_PCA2)
summary(lm(PhenDist_PCA2 ~ PCA2, Both))
setwd("../CleanData/")
# Read in data
Fit<-read.csv("FitPA4.csv")
# Root trait data
tot2<-read.csv("totPA4.csv")
# Size
size<-read.csv("SizeData.csv",na.strings = c("."," "))
# Correct data structure
size$Block=as.factor(size$Block)
Fit$Block=as.factor(Fit$Block)
tot2$Block=as.factor(tot2$Block)
# Subset for I. purpurea
Purp<-droplevels(subset(size,size$Species=="Ip"&size$Population=="PA4"))
### TRANSFORM Root trait data, box-cox, center, scale
# Exlude these columns from transformation
EXCLUDE<-c("Position", "Species","EXP_CODE", "Image_Name","IMAGE_ID", "CIR_RATIO", "X_PIXEL", "Full.Path","Name","Type","Date","URL","Last.Updated","Folder_Name","UniqId.x","File_copy","UniqId.y",
"Y_PIXEL", "X_SCALE", "Y_SCALE", "COMP_TIME", "Comment", "Block",
"Order", "ML", "GerminationDate", "Comment1", "Dead_plant", "DeathCause",
"RootsHarvested", "SeedsCounted", "Trt", "Comp", "Combos", "Population"
)
########################################################
# Transform data
########################################################
predictors<-tot2[-which(names(tot2)%in%EXCLUDE)]
library(caret)
trans = preProcess(predictors,
c("BoxCox", "center", "scale"))
predictorsTrans = data.frame(
trans = predict(trans, predictors))
#Incorporate factor variables to the transformed data set
totTrans<-predictorsTrans
totTrans$Species<-tot2$Species
totTrans$Population<-tot2$Population
totTrans$Block<-tot2$Block
totTrans$ML<-tot2$ML
totTrans$Trt<-tot2$Trt
totTrans$Position<-tot2$Position
totTrans$Combos<-tot2$Combos
Focus<-paste("trans.",names(tot2[,c(1:33)]),sep="")
# Make factor variables factors
totTrans[c("Population","Species","ML","Combos","Block","Trt")]<-lapply(totTrans[c("Population","Species","ML","Combos","Block","Trt")],as.factor)
# Remove Block effects
Data1<-totTrans
Data1[1:33]<-NA
for(i in 1:33) {
Residual<-lm(totTrans[,i]~Block,totTrans,na.action="na.exclude")$residuals
Data1[names(Residual),i]<-Residual
}
BlkRmv<-Data1 # Focal traits with block effect removed.
########################################################
#### PCA ####
########################################################
# FOCAL TRAITS
FocusTraits=c("trans.SKL_NODES", "trans.DIA_STM", "trans.DIA_STM_SIMPLE",
"trans.AREA", "trans.AVG_DENSITY", "trans.TD_AVG", "trans.WIDTH_MAX",
"trans.D10", "trans.D20", "trans.D30", "trans.D40", "trans.D50",
"trans.D60", "trans.D70", "trans.D80", "trans.D90", "trans.RDISTR_X",
"trans.RDISTR_Y", "trans.SKL_DEPTH", "trans.SKL_WIDTH", "trans.RTP_COUNT",
"trans.STA_RANGE", "trans.STA_MAX", "trans.RTA_RANGE", "trans.RTA_MAX",
"trans.ADVT_COUNT", "trans.BASAL_COUNT", "trans.ADVT_ANG", "trans.BASAL_ANG",
"trans.HYP_DIA", "trans.TAP_DIA", "trans.MAX_DIA_90", "trans.DROP_50"
)
# Make sure that 'Alone' treatment is not excluded from PCA analysis
BlkRmv$Combos<-as.character(BlkRmv$Combos)
BlkRmv[which(BlkRmv$Trt=="Alone"),"Combos"]<-"none"
BlkRmv$Combos<-as.factor(BlkRmv$Combos)
BlkRmvFull<-na.omit(BlkRmv)
#BlkRmvFull <-BlkRmvFull[c(FocusTraits[-which(FocusTraits%in%c("trans.D10","trans.D20","trans.DIA_STM_SIMPLE"))],"Species","Population","Trt","Block","ML","Position","Combos")]
Qually<-which(names(BlkRmvFull)%in%c("Species","Population","Trt","Block","ML","Position","Combos"))
res.pca<-PCA(BlkRmvFull,quali.sup=c(Qually),scale.unit=T,graph=F)
BlkRmvFull$Species<-as.factor(BlkRmvFull$Species)
p<-fviz_pca_ind(res.pca, label="none", habillage=BlkRmvFull$Species,
addEllipses=TRUE, ellipse.level=0.95)+
theme_bw()
pca<-p + scale_color_manual(values=c('#999999','#E69F00'))+
theme_classic()+
scale_fill_manual(values=c('#999999','#E69F00'))+
ggtitle("")
pca
# Plot the top 30 contributing individuals
fviz_pca_biplot(res.pca, label="var",col.var="contrib",repel=T,
select.var = list(contrib = 10))+
scale_color_gradient2(low="green", mid="red",
high="red", midpoint=96) +
theme_minimal()
# Plot the ten top traits contributing to ea PC for the top 4 PC's
# Contributions of variables to PC1
fviz_contrib(res.pca, choice = "var", axes = 1, top = 10) # PC1
# Contributions of variables to PC2
fviz_contrib(res.pca, choice = "var", axes = 2, top = 10) # PC2
fviz_contrib(res.pca, choice = "var", axes = 3, top = 10) # PC3
# Contributions of variables to PC2
fviz_contrib(res.pca, choice = "var", axes = 4, top = 10) # PC4
# Estimate the EigenVectors of each trait
library(Rcmdr)
# Extract the loading score of each trait
Loads<-sweep(res.pca$var$coord,2,sqrt(res.pca$eig[1:ncol(res.pca$var$coord),1]),FUN="/")
LoadsDf<-data.frame(Loads)
LoadsDf$Traits<-gsub("trans.","",x=row.names(Loads))
PC1Loads<-ggplot(LoadsDf)+
geom_bar(aes(Traits,Dim.1),stat="identity")+
theme_classic()+
theme(axis.text.x=element_text(angle=90,color="black",size=15),plot.title = element_text(hjust=0.5,size=20))+
ylab(" ")+
xlab(" ")+
ggtitle("PC1")
PC2Loads<-ggplot(LoadsDf)+
geom_bar(aes(Traits,Dim.2),stat="identity")+
theme_classic()+
theme(axis.text.x=element_text(angle=90,color="black",size=15),plot.title = element_text(hjust=0.5,size=20))+
ylab(" ")+
xlab(" ")+
ggtitle("PC2")
PC3Loads<-ggplot(LoadsDf)+
geom_bar(aes(Traits,Dim.3),stat="identity")+
theme_classic()+
theme(axis.text.x=element_text(angle=90,color="black",size=15),plot.title = element_text(hjust=0.5,size=20))+
ylab(" ")+
xlab(" ")+
ggtitle("PC3")
PC4Loads<-ggplot(LoadsDf)+
geom_bar(aes(Traits,Dim.4),stat="identity")+
theme_classic()+
theme(axis.text.x=element_text(angle=90,color="black",size=15),plot.title = element_text(hjust=0.5,size=20))+
ylab(" ")+
xlab(" ")+
ggtitle("PC4")
library(grid)
Grid=cowplot::plot_grid(PC1Loads,PC2Loads,PC3Loads,PC4Loads,nrow=2,ncol=2,align="hv")
x.grob<-textGrob("Traits",gp=gpar(col=
"black",fontsize=25),rot=0)
y.grob<-textGrob("Loading Score",gp=gpar(col="black",fontsize=25),rot=90)
gridExtra::grid.arrange(gridExtra::arrangeGrob(Grid,bottom=x.grob,left=y.grob,padding=unit(1, units='in'),nrow=1))
# Making a copy of the traits data with block effects removed
TraitsAll<-BlkRmvFull
# 1) Subset between Ipurp and Ihed
TraitsAll$PCA1<-res.pca$ind$coord[,1]
TraitsAll$PCA2<-res.pca$ind$coord[,2]
TraitsAll$PCA3<-res.pca$ind$coord[,3]
TraitsAll$PCA4<-res.pca$ind$coord[,4]
########################################################
# Calculate relative fitness
########################################################
# Reduce Purp to combine to leaf fitness data
Purp.Red<-Purp[c("Position","Leaf.Number","Species")]
colnames(Purp.Red)[3]<-"ID"
Fit2<-merge(Purp.Red,Fit)
SdMnSpeciesTrt<- aggregate(SeedNumber ~ Species+Trt, Fit2, mean) # Mean residual
names(SdMnSpeciesTrt)[3]<- "MeanSdNm" #Rename coloumn for mean seed number
# Merge average fitness by species and treatment
Fitmean<-merge(Fit2,SdMnSpeciesTrt,by=c("Species","Trt"))
# Calculate relative fitness as the observed seed number by the total mean seed number of that species and treatment.
Fitmean$Rel_Fit<-Fitmean$SeedNumber/Fitmean$MeanSdNm
Fitmean$Combos<-as.character(Fitmean$Combos)
Fitmean[which(Fitmean$Trt=="Alone"),"Combos"]<-"none"
Fitmean$Combos<-as.factor(Fitmean$Combos)
# Extract residuals of block and size
Fitmean$SeedNumberResid<-NA
SeedResiduals<-(lm(Rel_Fit~Block+Leaf.Number,Fitmean))$residuals
Fitmean[names(SeedResiduals),"SeedNumberResid"]<-SeedResiduals
# All looks good. Use SeedNumberResid
plot(Fitmean$SeedNumber,Fitmean$Rel_Fit)
plot(Fitmean$SeedNumberResid,Fitmean$Rel_Fit)
RelFitMean<-aggregate(SeedNumberResid~ML+Trt,Fitmean,mean) # Average relative fitness by treatment and maternal line
########################################################
# Perform linear regression of PCs onto relative fitness
########################################################
# Obtain the family and treatment means of individual PC scores
# Subset for I purpurea species
IpPA4<-droplevels(TraitsAll%>%filter(Species=="Ip"))
# Calculate mean of traits by treatment and maternal line
pcFamilyMeans<-aggregate(list(IpPA4[c("PCA1","PCA2","PCA3","PCA4")]),by=list(IpPA4$Trt,IpPA4$ML),FUN=mean) #
colnames(pcFamilyMeans)[1:2]<-c("Trt","ML") # Rename columns
# Combine relative fitness and family means of the PC's
pcFamilyMeans<-merge(pcFamilyMeans,RelFitMean)
PCAall=pcFamilyMeans
pcFamilyMeans=pcFamilyMeans
PCAalone<-droplevels(pcFamilyMeans%>%filter(Trt=="Alone"))
PCAcomp<-droplevels(pcFamilyMeans%>%filter(Trt!="Alone"))
# Estimate the selection gradient for each treatment and PC trait
PC1.res.alone<-summary(lm(SeedNumberResid~PCA1,PCAalone))
PC2.res.alone<-summary(lm(SeedNumberResid~PCA2,PCAalone))
PC3.res.alone<-summary(lm(SeedNumberResid~PCA3,PCAalone))
PC4.res.alone<-summary(lm(SeedNumberResid~PCA4,PCAalone))
PC1.res.comp<-summary(lm(SeedNumberResid~PCA1,PCAcomp))
PC2.res.comp<-summary(lm(SeedNumberResid~PCA2,PCAcomp))
PC3.res.comp<-summary(lm(SeedNumberResid~PCA3,PCAcomp))
#PC4.res.comp<-summary(lm(SeedNumberResid~PCA4,PCAcomp%>%filter(PCA4>-1)))
PC4.res.comp<-summary(lm(SeedNumberResid~PCA4,PCAcomp))
# Subset the linear coefficients and standar errors from selection analysis
AloneResults<-list(PC1.res.alone,PC2.res.alone,PC3.res.alone,PC4.res.alone)
CompResults<-list(PC1.res.comp,PC2.res.comp,PC3.res.comp,PC4.res.comp)
Empty=list()
for (i in AloneResults){
for (j in c(1,2,4)){
coefficient<-(AloneResults[[j]])$coefficients[2,1]
Empty[j]<-coefficient
}
}
SelGradAlone<-do.call('rbind',Empty)
Empty=list()
for (i in CompResults){
for (j in c(1,2,4)){
coefficient<-(CompResults[[j]])$coefficients[2,1]
Empty[j]<-coefficient
}
}
SelGradCompetition<-do.call('rbind',Empty)
# Repeat steps for standard error
Empty=list()
for (i in AloneResults){
for (j in c(1,2,4)){
coefficient<-(AloneResults[[j]])$coefficients[2,2]
Empty[j]<-coefficient
}
}
StErAlone<-do.call('rbind',Empty)
Empty=list()
for (i in CompResults){
for (j in c(1,2,4)){
coefficient<-(CompResults[[j]])$coefficients[2,2]
Empty[j]<-coefficient
}
}
StErCompetition<-do.call('rbind',Empty)
########################################################
# Do back regression
########################################################
# Eigenvectors multiplied by the vector of selection gradient
EigenVectors<-Loads[,c(1,2,4)]
# For alone treatment
SelectionCoef.Alone.BR<-EigenVectors %*% SelGradAlone
# For alone treatment
SelectionCoef.Comp.BR<-EigenVectors %*% SelGradCompetition
# Confidence Intervals
# 1. get the square value of eigenvectors
EigenVecSq<-EigenVectors*EigenVectors
# 2. get the square value of standard errors
StErrSqAlone<-StErAlone*StErAlone
StErrSqComp<-StErCompetition*StErCompetition
# Matrix multiplication between standard error squared and eigenvectors squared, and then square root the output
AloneSE.BR<-sqrt((EigenVecSq%*%StErrSqAlone))
CompSE.BR<-sqrt((EigenVecSq%*%StErrSqComp))
# Alone
AloneBR.Res<-data.frame(cbind(SelectionCoef.Alone.BR,AloneSE.BR))
colnames(AloneBR.Res)<-c("Beta","SE")
AloneBR.Res$tValue=AloneBR.Res$Beta/AloneBR.Res$SE
#Competition
CompBR.Res<-data.frame(cbind(SelectionCoef.Comp.BR,CompSE.BR))
colnames(CompBR.Res)<-c("Beta","SE")
CompBR.Res$tValue=CompBR.Res$Beta/CompBR.Res$SE
AloneBR.Res$Trt="Alone"
CompBR.Res$Trt="Comp"
AloneBR.Res$Traits<-row.names(AloneBR.Res)
CompBR.Res$Traits<-row.names(CompBR.Res)
Total.BR.Res<-rbind(AloneBR.Res,CompBR.Res)
#write.csv(Total.BR.Res,"ResultsBackRegression.csv",row.names = F)
### Estimate significance with confidence intervals of 2 SE
## 2 SE
Total.BR.Res$SE2=Total.BR.Res$SE*1.96
Total.BR.Res$Upp=Total.BR.Res$Beta+Total.BR.Res$SE2
Total.BR.Res$Low=Total.BR.Res$Beta-Total.BR.Res$SE2
DT::datatable(Total.BR.Res)
DT::datatable(Total.BR.Res[-which(Total.BR.Res$Upp>0 & Total.BR.Res$Low<0),])
Significant<-Total.BR.Res[-which(Total.BR.Res$Upp>0 & Total.BR.Res$Low<0),]
Save<-Total.BR.Res[which(Total.BR.Res$Traits%in%Significant$Traits),]
Save$Traits=row.names(Save)
Save$Traits<-gsub("1","",Save$Traits)
DT::datatable(Save[c(1,2,4,7,8)])
